Description: fixed parsing of Timestamp and TimestampTz columns in Python3
 This modifies timestamp_parse and timestamp_tz_parse to coerce the argument
 to a utf-8 encode string. In Python2 the argument is already a string while
 in Python3 it is a bytes object.
Author: Dennis O'Brien
Origin: https://github.com/uber/vertica-python/pull/119
Bug: https://github.com/uber/vertica-python/issues/117
Reviewed-by: Jean Baptiste Favre <debian@jbfavre.org>
Last-Update: 2016-05-22
---
This patch header follows DEP-3: http://dep.debian.net/deps/dep3/
--- a/vertica_python/vertica/column.py
+++ b/vertica_python/vertica/column.py
@@ -34,6 +34,7 @@ years_re = re.compile(r'^([0-9]+)-')
 # timestamptz type stores: 2013-01-01 05:00:00.01+00
 #       select t AT TIMEZONE 'America/New_York' returns: 2012-12-31 19:00:00.01
 def timestamp_parse(s):
+    s = str(s, 'utf-8')
     try:
         dt = _timestamp_parse(s)
     except ValueError:
@@ -62,6 +63,7 @@ def _timestamp_parse_without_year(s):
 
 
 def timestamp_tz_parse(s):
+    s = str(s, 'utf-8')
     # if timezome is simply UTC...
     if s.endswith('+00'):
         # remove time zone
--- a/vertica_python/tests/date_tests.py
+++ b/vertica_python/tests/date_tests.py
@@ -56,16 +56,19 @@ class TimestampParsingTestCase(VerticaTe
 
 
     def test_timestamp_parser(self):
-        parsed_timestamp = timestamp_parse('1841-05-05 22:07:58')
+        test_timestamp = '1841-05-05 22:07:58'.encode(encoding='utf-8', errors='strict')
+        parsed_timestamp = timestamp_parse(test_timestamp)
         # Assert parser default to strptime
         self.assertEqual(datetime(year=1841, month=5, day=5, hour=22, minute=7, second=58), parsed_timestamp)
 
     def test_timestamp_with_year_over_9999(self):
-        parsed_timestamp = timestamp_parse('44841-05-05 22:07:58')
+        test_timestamp = '44841-05-05 22:07:58'.encode(encoding='utf-8', errors='strict')
+        parsed_timestamp = timestamp_parse(test_timestamp)
         # Assert year was truncated properly
         self.assertEqual(datetime(year=4841, month=5, day=5, hour=22, minute=7, second=58), parsed_timestamp)
 
     def test_timestamp_with_year_over_9999_and_ms(self):
-        parsed_timestamp = timestamp_parse('124841-05-05 22:07:58.000003')
+        test_timestamp = '124841-05-05 22:07:58.000003'.encode(encoding='utf-8', errors='strict')
+        parsed_timestamp = timestamp_parse(test_timestamp)
         # Assert year was truncated properly
         self.assertEqual(datetime(year=4841, month=5, day=5, hour=22, minute=7, second=58, microsecond=3), parsed_timestamp)
