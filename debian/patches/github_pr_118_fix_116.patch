Description: fixed issue #116 where column names were bytes objects instead of strings
 This addresses an issue in vertica-python when run in Python3 where column names are
 bytes objects instead of utf-8 encoded strings. Also added a test case that fails in
 Python3 before this PR and succeeds after. (Note: Tests fail under python3.5 for
 test_unicode_named_parameter_binding even from master. This doesn't do anything to
 address that.)
Author: Dennis O'Brien
Origin: https://github.com/uber/vertica-python/pull/118
Bug: https://github.com/uber/vertica-python/issues/116
Reviewed-by: Jean Baptiste Favre <debian@jbfavre.org>
Last-Update: 2016-05-22
---
This patch header follows DEP-3: http://dep.debian.net/deps/dep3/
--- /dev/null
+++ b/vertica_python/tests/column_tests.py
@@ -0,0 +1,21 @@
+from .test_commons import conn_info, VerticaTestCase
+from .. import connect
+
+
+class ColumnTestCase(VerticaTestCase):
+    def test_column_names_query(self):
+        column_0 = 'isocode'
+        column_1 = 'name'
+        query = """
+        select 'US' as {column_0}, 'United States' as {column_1}
+        union all
+        select 'CA', 'Canada'
+        union all
+        select 'MX', 'Mexico'
+        """.format(column_0=column_0, column_1=column_1)
+        with connect(**conn_info) as conn:
+            cur = conn.cursor()
+            cur.execute(query)
+            description = cur.description
+            assert description[0].name == column_0
+            assert description[1].name == column_1
--- a/vertica_python/vertica/column.py
+++ b/vertica_python/vertica/column.py
@@ -124,7 +124,7 @@ class Column(object):
         return map(lambda x: x[0], Column.data_type_conversions())
 
     def __init__(self, col, unicode_error=None):
-        self.name = col['name']
+        self.name = col['name'].decode()
         self.type_code = col['data_type_oid']
         self.display_size = None
         self.internal_size = col['data_type_size']
@@ -143,7 +143,7 @@ class Column(object):
             self.type_code = 0
 
         #self.props = ColumnTuple(col['name'], col['data_type_oid'], None, col['data_type_size'], None, None, None)
-        self.props = ColumnTuple(col['name'], self.type_code, None, col['data_type_size'], None, None, None)
+        self.props = ColumnTuple(self.name, self.type_code, None, col['data_type_size'], None, None, None)
 
         #self.converter = self.data_type_conversions[col['data_type_oid']][1]
         self.converter = self.data_type_conversions[self.type_code][1]
